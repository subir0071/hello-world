name: pwritev2 test

on:
  workflow_dispatch:

jobs:
  test-pwritev2:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Write C program to test pwritev2
        run: |
          cat > test_pwritev2.c << 'EOF'
          #define _GNU_SOURCE
          #include <fcntl.h>
          #include <stdio.h>
          #include <string.h>
          #include <sys/uio.h>
          #include <unistd.h>

          #ifndef RWF_NOAPPEND
          #define RWF_NOAPPEND 0x00000010
          #endif

          int main() {
              const char *filename = "testfile.txt";

              // Step 1: Create and write initial content
              int fd = open(filename, O_CREAT | O_WRONLY | O_TRUNC, 0644);
              if (fd < 0) {
                  perror("open for write");
                  return 1;
              }

              const char *msg = "it's not working!";
              if (write(fd, msg, strlen(msg)) < 0) {
                  perror("initial write");
                  close(fd);
                  return 1;
              }
              close(fd);

              // Step 2: Open with O_APPEND
              fd = open(filename, O_WRONLY | O_APPEND);
              if (fd < 0) {
                  perror("open with O_APPEND");
                  return 1;
              }

              struct iovec iov = {
                  .iov_base = "   ",  // Trying to overwrite "not"
                  .iov_len = 3
              };

              // Step 3: Attempt to overwrite at offset 5 using pwritev2 + RWF_NOAPPEND
              ssize_t ret = pwritev2(fd, &iov, 1, 5, RWF_NOAPPEND);
              if (ret < 0) {
                  perror("pwritev2");
                  close(fd);
                  return 1;
              } else {
                  printf("pwritev2 return: %ld\n", ret);
              }
              close(fd);

              // Step 4: Read back file
              char buffer[100] = {0};
              fd = open(filename, O_RDONLY);
              if (fd < 0) {
                  perror("open for read");
                  return 1;
              }
              ssize_t bytes = read(fd, buffer, sizeof(buffer)-1);
              if (bytes < 0) {
                  perror("read");
                  close(fd);
                  return 1;
              }
              close(fd);

              printf("Final file content: [%s]\n", buffer);
              return 0;
          }
          EOF

      - name: Compile test_pwritev2.c
        run: gcc -o test_pwritev2 test_pwritev2.c

      - name: Run test
        run: ./test_pwritev2
